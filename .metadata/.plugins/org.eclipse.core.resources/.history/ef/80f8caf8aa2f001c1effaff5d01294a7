/*
 * salon.c
 *
 *  Created on: 16 oct. 2021
 *      Author: gt
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "utn_validador.h"
#include "salon.h"
#define VACIO 0
#define OCUPADO 1
#define NOMBRE_LEN 54
#define DIRECCION_LEN 128

static int getId(void);

/**brief nos genera un id nuevo consecutivo cuando se invoca ( en este caso comienza a partir del 1000 en adelante)
 * param (no recibe nada)
 * return retorna un entero positivo que se usa como id "SOLO PARA USAR EN ESTA BIBLIOTECA"
 */
static int getId(void)
{
	static int counter=1;
	return (counter++);
}

/**brief nos inicializa todo el array colocando en la posicion isEmpty un 0 para indicar lugar Libre
 * param recibe el array de la estructura completa y el tamaño del mismo
 * return retorna -1 si por algun error en el array o tamaño no se pudo inicializar y 0 si fue exitoso
 */
int init_salones(eSalones salon[], int len)
{
	int retorno=-1;
	int i;
	if(salon!=NULL && len>0)
	{

		for(i=0; i<len; i++)
		{
			salon[i].isEmpty_salon=VACIO; // posicion Libre
		}
		retorno=0;
	}
	return retorno;
}

/**brief funcion sencilla que se dedica a pedir la info necesaria para cargar los campos de los empleados nombre apellido sector salario
 *
 * return retorna 0 si todos los datos se cargaron ok y -1 si hubo algun error
 */
int getDataSalon(char name[], char lastName[], int *sector, float *salary)
{
	int retorno=-1;
	if (name!=NULL && lastName!=NULL && sector!=NULL && salary!=NULL)
	{
		if (utn_pedirIntAUsuarioConLimites(sector, 1, 6, 3, "ingresar numero sector: (Sector 1-2-3-4-5-6):", "Error.\n")==0)
		{
			if(utn_pedirFloatPositivoAUsuario(salary, 3, "Ingrese Salario: \n", "Error.\n")==0)
			{
				if(utn_pedirNombreYApellidoAUsuario(name, NOMBRE_LEN, 3, "Ingrese Nombre: (solo Letras)", "Error.\n")==0)
				{
					if(utn_pedirNombreYApellidoAUsuario(lastName, DIRECCION_LEN, 3, "Ingrese apellido: (solo Letras)", "Error.\n")==0)
					{
						retorno=0;
					}
				}
			}
		}
	}

	return retorno;
}


/**brief verificamos si hay espacio (isempty LIBRE) donde escribir en la lista de ser asi llamamos a la funcion getData para cargar la info del empleado nuevo
 * si todo esta bien generamos un id y llamamos a la funcion add para escribir la info del empleado una posicion en la lista
 *param array de employe y el tamaño
 *return -3 si hay fallas en el archivo -2 si la memoria o la lista esta llena -1 si ingreso mal los datos en varias ocasiones y 0 si todo salio ok
 */
int loadEmployee(Employee* list, int len)
{
	int retorno=-3;
	char name[NAME_LEN];
	char lastName[LASTNAME_LEN];
	int sector;
	float salary;
	int id;
	if (salon=NULL && len>0)
	{
		if (isFree(list, len)>=0)
		{
			if(getDataEmployee(name, lastName, &sector, &salary)==0)
			{
				id=getId();
				addEmployee(list, len, id, name, lastName, salary, sector);
				retorno = 0; // printf ("Cargado con Exito")
			}
			else
			{
				retorno = -1; //printf("error al ingresar datos");
			}
		}
		else
		{
			retorno= -2; //printf("Memoria Llena, No hay espacio para mas Empleados");
		}

	}

	return retorno;
}

/**brief cargamos la info del empleado a una pocision de la estructura, tomamos una posicion libre en gen_eslibre la guardamos en auxIsFree
 * copiamos los datos en cada uno de los campos sector nombre apellido id salario y colocamos como ocupada la posicion isempty
 *param lista completa tamaño de la lista id, nombre, apellido, salario y sector del empleado a cargar ya previamente validado
 *return 0 si la carga fue ok -1 si por algo hubo un error
 */
int addEmployee(eSalones salon[], int len, char nombre[], char direccion[], int id,  int tipo)
{
	int retorno=-1;
	int auxIsFree;
	if (salon!=NULL && len>0 && id>0 && nombre!=NULL && direccion!=NULL && tipo>0 && tipo<=2)
	{
		if (isFree(salon, len, &auxIsFree)==0)
		{
			salon[auxIsFree].tipo_salon=tipo;
			strncpy(salon[auxIsFree].name_salon, nombre, sizeof(salon[auxIsFree].name_salon));
			strncpy(salon[auxIsFree].direccion_salon, direccion, sizeof(salon[auxIsFree].direccion_salon));
			salon[auxIsFree].isEmpty_salon=OCUPADO;
			salon[auxIsFree].id_salon=id;
			retorno=0;
		}

	}
	return retorno;
}

/**brief Verificamos que el array venga bien el tamaño del array mayor q 0 y el puntero a la posicion libre sea != NULL tambien
 * recorremos el array en todo su tamaño y en la primera casilla que encontremos desocupada isempty=0
 * retornamos la posicion libre y hacemos un break para salir del for y no seguir iterando
 *  param recibo el array de la estructura el tamaño del array
 * return retorna -2 si el array de la estructura  o el puntero posicionLibre viene con errores  o el tamaño del array es menor a 0
 *  -1  si la memoria esta llena y 0 si fue encontrada una casilla libre
 */
int isFree(eSalones list[], int len)
{
	// devuelve -2 si la falla es error de array o tamaño del array
	int retorno=-2;
	if (list!=NULL && len>0)
	{
		retorno=-1; //-1 si la memoria esta llena
		for (int i=0; i<len; i++)
		{
			if (list[i].isEmpty_employee==VACIO)
			{
				retorno=i; //devuelve el indice de la primera posicion libre
				break;
			}
		}

	}
	return retorno;
}
