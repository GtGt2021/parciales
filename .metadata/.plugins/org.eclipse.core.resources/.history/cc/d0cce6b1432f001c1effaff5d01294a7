/*
 * salon.c
 *
 *  Created on: 16 oct. 2021
 *      Author: gt
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "utn_validador.h"
#include "salon.h"
#define VACIO 0
#define OCUPADO 1
#define NOMBRE_LEN 54
#define DIRECCION_LEN 128

static int getId(void);

/**brief nos genera un id nuevo consecutivo cuando se invoca ( en este caso comienza a partir del 1000 en adelante)
 * param (no recibe nada)
 * return retorna un entero positivo que se usa como id "SOLO PARA USAR EN ESTA BIBLIOTECA"
 */
static int getId(void)
{
	static int counter=1;
	return (counter++);
}

/**brief nos inicializa todo el array colocando en la posicion isEmpty un 0 para indicar lugar Libre
 * param recibe el array de la estructura completa y el tamaño del mismo
 * return retorna -1 si por algun error en el array o tamaño no se pudo inicializar y 0 si fue exitoso
 */
int init_salones(eSalones salon[], int len)
{
	int retorno=-1;
	int i;
	if(salon!=NULL && len>0)
	{

		for(i=0; i<len; i++)
		{
			salon[i].isEmpty_salon=VACIO; // posicion Libre
		}
		retorno=0;
	}
	return retorno;
}

int getDataSalon(char name[], char lastName[], int *sector, float *salary)
{
	int retorno=-1;
	if (name!=NULL && lastName!=NULL && sector!=NULL && salary!=NULL)
	{
		if (utn_pedirIntAUsuarioConLimites(sector, 1, 6, 3, "ingresar numero sector: (Sector 1-2-3-4-5-6):", "Error.\n")==0)
		{
			if(utn_pedirFloatPositivoAUsuario(salary, 3, "Ingrese Salario: \n", "Error.\n")==0)
			{
				if(utn_pedirNombreYApellidoAUsuario(name, NOMBRE_LEN, 3, "Ingrese Nombre: (solo Letras)", "Error.\n")==0)
				{
					if(utn_pedirNombreYApellidoAUsuario(lastName, DIRECCION_LEN, 3, "Ingrese apellido: (solo Letras)", "Error.\n")==0)
					{
						retorno=0;
					}
				}
			}
		}
	}

	return retorno;
}
