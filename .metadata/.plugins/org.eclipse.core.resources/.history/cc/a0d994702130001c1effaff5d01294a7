/*
 * arcade.c
 *
 *  Created on: 16 oct. 2021
 *      Author: gt
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "utn_validador.h"
#include "arcade.h"
#define VACIO 0
#define OCUPADO 1

static int getId(void);

/**brief nos genera un id nuevo consecutivo cuando se invoca ( en este caso comienza a partir del 1000 en adelante)
 * param (no recibe nada)
 * return retorna un entero positivo que se usa como id "SOLO PARA USAR EN ESTA BIBLIOTECA"
 */
static int getId(void)
{
	static int counter=1000;
	return (counter++);
}
int init_arcades(eArcades list[], int len)
{
	int retorno=-1;
	int i;
	if(list!=NULL && len>0)
	{

		for(i=0; i<len; i++)
		{
			list[i].isEmpty_arcade=VACIO; // posicion Libre
		}
		retorno=0;
	}
	return retorno;
}


/**brief funcion sencilla que se dedica a pedir la info necesaria para cargar los campos de los empleados nombre apellido sector salario
 *
 * return retorna 0 si todos los datos se cargaron ok y -1 si hubo algun error
 */
static int arcade_getDataArcade(char nombre[], char direccion[], int *tipo)
{
	int retorno=-1;
	if (nombre!=NULL && direccion!=NULL && tipo!=NULL)
	{
		if (utn_pedirIntAUsuarioConLimites(tipo, 1, 2, 3, "ingresar el tipo de arcade:\n1.-Shopping\n2.-Local", "Error.\n")==0)
		{
			if(utn_pedirNombreYApellidoAUsuario(nombre, NOMBRE_LEN, 3, "Ingrese Nombre Local: (solo Letras y Espacio)", "Error.\n")==0)
			{
				if(utn_PedirCualquierCaracterAUsuario(direccion, DIRECCION_LEN, 3, "Ingresar Direccion: ", "Error")==0)
				{
					retorno=0;
				}
			}
		}
	}

	return retorno;
}


/**brief verificamos si hay espacio (isempty LIBRE) donde escribir en la lista de ser asi llamamos a la funcion getData para cargar la info del empleado nuevo
 * si todo esta bien generamos un id y llamamos a la funcion add para escribir la info del empleado una posicion en la lista
 *param array de employe y el tamaño
 *return -3 si hay fallas en el archivo -2 si la memoria o la lista esta llena -1 si ingreso mal los datos en varias ocasiones y si todo sale bien nos devuelve el id generado
 */
int arcade_loadArcade(eArcades salon[], int len)
{
	/*
	 * 	int tipoSonido_salon;
	int cantidad_jugadores;
	int idSalon_arcade;
	-int capacidadFichas_arcade;
	-int id_arcade;
	-char nacionalidad_arcade [NACIONALIDAD_LEN];
	-char nombreJuego_arcade [VIDEOJUEGO_LEN];
	int isEmpty_arcade;*/

	int retorno=-3;
	char nombre[NOMBRE_LEN];
	char nacionalidad[DIRECCION_LEN];
	int capacidad;
	int idSalon;
	int idArcade;
	int cantidadJugadores;
	int index;
	if (salon!=NULL && len>0)
	{
		if (isFree(salon, len, &index)==0)
		{
			if(getDataSalon(nombre, direccion, &tipo)==0)
			{
				id=getId();
				addSalon(salon, len, nombre, direccion, id, tipo);

				salon_printPositionIdNombreDirTipo(&salon[index]);

				retorno = 0; // printf ("Cargado con Exito")

			}
			else
			{
				retorno = -1; //printf("error al ingresar datos");
			}
		}
		else
		{
			retorno= -2; //printf("Memoria Llena, No hay espacio para mas Empleados");

		}

	}
	//printf("El retorno es %d", retorno);
	return retorno;
}

/**brief cargamos la info del empleado a una pocision de la estructura, tomamos una posicion libre en gen_eslibre la guardamos en auxIsFree
 * copiamos los datos en cada uno de los campos sector nombre apellido id salario y colocamos como ocupada la posicion isempty
 *param lista completa tamaño de la lista id, nombre, apellido, salario y sector del empleado a cargar ya previamente validado
 *return 0 si la carga fue ok -1 si por algo hubo un error
 */
static int arcade_addSalon(eArcades arcades[], int len, char nombre[], char direccion[], int id,  int tipo)
{
	int retorno=-1;
	int auxIsFree;
	if (arcades!=NULL && len>0 && id>0 && nombre!=NULL && direccion!=NULL && tipo>0 && tipo<=2)
	{
		if (isFree(arcades, len, &auxIsFree)==0)
		{
			arcades[auxIsFree].tipo_arcades=tipo;
			strncpy(arcades[auxIsFree].name_salon, nombre, sizeof(arcades[auxIsFree].name_salon));
			strncpy(arcades[auxIsFree].direccion_salon, direccion, sizeof(arcades[auxIsFree].direccion_salon));
			arcades[auxIsFree].isEmpty_salon=OCUPADO;
			arcades[auxIsFree].id_arcades=id;
			retorno=0;
		}

	}
	return retorno;
}
